FROM node:lts AS builder

WORKDIR /app

# Copia los archivos de manifiesto para aprovechar el caché de Docker.
COPY package*.json .
# Instala todas las dependencias (dev y prod)
RUN npm ci

# Copia el código fuente restante y compila TypeScript
COPY . .
RUN npx tsc --build

# ----------------------------------------------------------------------
# Stage 2: Production Runtime Phase
# Usa una imagen más ligera (slim) para el entorno de ejecución final.
# ----------------------------------------------------------------------
FROM node:lts-slim

# Instala 'curl' para el 'healthcheck' definido en docker-compose.yaml.
# Esto asegura que el test 'curl -f' funcione correctamente.
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copia solo los archivos de producción (compilados, packages y knexfile)
COPY --from=builder /app/dist /app/dist
COPY --from=builder /app/package*.json /app/
COPY --from=builder /app/src/knexfile.ts /app/src/

# --- COPIA DE ARCHIVOS DE KNEX (SEEDS Y MIGRACIONES) ---
# FIX: Agregado: Copia la carpeta 'migrations' necesaria para que knex migrate:latest funcione al inicio.
COPY --from=builder /app/migrations /app/migrations
COPY --from=builder /app/seeds /app/seeds

# Instala solo las dependencias de producción.
RUN npm ci --only=production

# --- INSTALACIÓN EXPLÍCITA DE bcryptjs ---
# Instalamos bcryptjs para asegurar que esté disponible para el script de seed.
RUN npm install bcryptjs

# Copia el script health.sh (aunque el healthcheck en compose usa curl, es bueno mantenerlo)
COPY health.sh .
RUN chmod +x health.sh

# Crea el directorio /invoices/ y copia los recursos
RUN mkdir -p /invoices/
COPY resources/ /invoices/

EXPOSE 3000

# El 'CMD' es la forma por defecto de arrancar la app.
# En este caso, será sobrescrito por el 'command' en docker-compose.yaml,
# que ejecuta las migraciones antes de arrancar la aplicación.
CMD ["node", "dist/src/index.js"]